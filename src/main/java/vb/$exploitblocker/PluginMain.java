package vb.$exploitblocker;
import java.io.*;
import java.nio.file.*;
import java.util.*;
import org.bukkit.*;
import org.bukkit.block.*;
import org.bukkit.command.*;
import org.bukkit.entity.*;
import org.bukkit.event.*;
import org.bukkit.inventory.*;
import org.bukkit.inventory.meta.*;
import org.bukkit.plugin.java.*;
import org.bukkit.util.*;

public class PluginMain extends JavaPlugin implements Listener {

	private static PluginMain instance;
	private static Object localVariableScope = new Object();

	public void onEnable() {
		instance = this;
		getDataFolder().mkdir();
		getServer().getPluginManager().registerEvents(this, this);
		Object localVariableScope = new Object();
		try {
			Bukkit.getConsoleSender().sendMessage(PluginMain.color("The server is protected!"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void onDisable() {
		try {
			Bukkit.getConsoleSender().sendMessage(PluginMain.color("The server is not protected!"));
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public boolean onCommand(CommandSender commandSender, Command command, String label, String[] commandArgs) {
		return true;
	}

	public static void procedure(String procedure, List<?> procedureArgs) throws Exception {
	}

	public static Object function(String function, List<?> functionArgs) throws Exception {
		return null;
	}

	public static List<Object> createList(Object obj) {
		List<Object> list = new ArrayList<>();
		if (obj.getClass().isArray()) {
			int length = java.lang.reflect.Array.getLength(obj);
			for (int i = 0; i < length; i++) {
				list.add(java.lang.reflect.Array.get(obj, i));
			}
		} else if (obj instanceof Collection<?>) {
			list.addAll((Collection<?>) obj);
		} else {
			list.add(obj);
		}
		return list;
	}

	public static String color(String string) {
		return string != null ? ChatColor.translateAlternateColorCodes('&', string) : null;
	}

	public static void createResourceFile(String path) {
		Path file = getInstance().getDataFolder().toPath().resolve(path);
		if (Files.notExists(file)) {
			try (InputStream inputStream = PluginMain.class.getResourceAsStream("/" + path)) {
				Files.createDirectories(file.getParent());
				Files.copy(inputStream, file);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}

	public static PluginMain getInstance() {
		return instance;
	}

	@EventHandler(priority = EventPriority.NORMAL)
	public void onInventoryOpenEvent1(org.bukkit.event.inventory.InventoryOpenEvent event) throws Exception {
		if (((Player) event.getPlayer()).getInventory()
				.containsAtLeast(new ItemStack(org.bukkit.Material.COMMAND_BLOCK), ((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
		if (((Player) event.getPlayer()).getInventory().containsAtLeast(new ItemStack(org.bukkit.Material.BARRIER),
				((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
		if (((Player) event.getPlayer()).getInventory().containsAtLeast(new ItemStack(org.bukkit.Material.SPAWNER),
				((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
		if (((Player) event.getPlayer()).getInventory()
				.containsAtLeast(new ItemStack(org.bukkit.Material.COMMAND_BLOCK_MINECART), ((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
		if (((Player) event.getPlayer()).getInventory()
				.containsAtLeast(new ItemStack(org.bukkit.Material.BAT_SPAWN_EGG), ((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
		if (((Player) event.getPlayer()).getInventory()
				.containsAtLeast(new ItemStack(org.bukkit.Material.BEE_SPAWN_EGG), ((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
		if (((Player) event.getPlayer()).getInventory()
				.containsAtLeast(new ItemStack(org.bukkit.Material.CAVE_SPIDER_SPAWN_EGG), ((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
		if (((Player) event.getPlayer()).getInventory()
				.containsAtLeast(new ItemStack(org.bukkit.Material.VEX_SPAWN_EGG), ((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
		if (((Player) event.getPlayer()).getInventory()
				.containsAtLeast(new ItemStack(org.bukkit.Material.EVOKER_SPAWN_EGG), ((int) 1d))) {
			Bukkit.getBanList(BanList.Type.NAME).addBan(((Player) event.getPlayer()).getName(),
					"Obtaining illegal items.", null, null);
		}
	}

	@EventHandler(priority = EventPriority.NORMAL)
	public void onPlayerToggleFlightEvent2(org.bukkit.event.player.PlayerToggleFlightEvent event) throws Exception {
		if (event.getPlayer().hasPermission("essentials.fly")) {
			event.getPlayer().setFlying(true);
		}
		if (!event.getPlayer().hasPermission("essentials.fly")) {
			event.getPlayer().setFlying(false);
			event.getPlayer().kickPlayer(PluginMain.color("Flying is not allowed on this server."));
		}
		if (PluginMain.checkEquals(event.getPlayer().getGameMode(), org.bukkit.GameMode.CREATIVE)) {
			event.getPlayer().setFlying(true);
		}
		if (PluginMain.checkEquals(event.getPlayer().getGameMode(), org.bukkit.GameMode.SPECTATOR)) {
			event.getPlayer().setFlying(true);
		}
	}

	@EventHandler(priority = EventPriority.NORMAL)
	public void onPlayerMoveEvent3(org.bukkit.event.player.PlayerMoveEvent event) throws Exception {
		if (PluginMain.checkEquals(new java.lang.Float(event.getPlayer().getWalkSpeed()), new java.lang.Double(10d))) {
			event.getPlayer().kickPlayer(PluginMain.color("Speed hacks."));
		}
	}

	public static boolean checkEquals(Object o1, Object o2) {
		if (o1 == null || o2 == null) {
			return false;
		}
		return o1 instanceof Number && o2 instanceof Number
				? ((Number) o1).doubleValue() == ((Number) o2).doubleValue()
				: o1.equals(o2);
	}
}
